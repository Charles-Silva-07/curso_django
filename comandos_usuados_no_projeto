Verificar a versão de python global

pyenv global = usado no Linux

pip install pipenv = instala o pipenv

pipenv install django = instal o Django

django-admin = serve para conferir os comandos

django-admin startproject ' nome do projeto ' e um spaço depois ponto PARA criar o arquivo manage.py na raiz do projeto

python manage.py --help = serve para saber os comandos

python manage.py runserver = RODA O SERVIDOR local e CTRLC PARA fechar

OBS: ALIAS LINUX
mng='python $VIRTUALENV_ENV/../manage.py'

ALIAS
windows criar um arquivo mng.bat e coloca  @python "%VIRTUAL_ENV%\..\manage.py" %*: PRONT AGORA E SO rodar mng runserver

pipenv install --dev flake8 = instala o flake8 para uso de desenvolvimeto

rm -rf .venv = REMOVE o ambiente virtual .venv

sudo rm -rf venv

pip uninstall virtualenv

pipenv sync = instalar dependencias que se encontra apenas no arquivo lock

pipenv sync = Apenas as dependencias de desenvolvimento ai ele vai pegar todas que se encontra no aquivo lock e instalar

pipenv install gunicorn = dependência para usar servidor de aplicação com heroku

ATIVAR O AMBIENTE VIRTUAL

linux = source .venv/bin/activate  ou usar o pipenv shell

Windowns = pipenv shell

pip freeze = VER as dependencias instaladas

pipenv update -d = atualiza as dependencias

VARIAVEIS GLOBAL PARA SETAR
    - PIPENV_VENV_IN_PROJECT valor 1 = CRIA o ambiente virtual dentro do projeto
    - PIPENV_IGNORE_VIRTUALENVS valor 1 = Ignora qualquer virtualenv que ja tenha sido criado

RODAR UM COMANDO ISOLADO

pipenv run flake8 = ele vai ativar o virtualen depois vai rodar o comando ao finalizar ele deaativa


heroku apps:create <sua_app>

FUNÇÃO SECRETA DO DJANGO CHAVE RANDOMICA = from django.core.management.utils import get_random_secret_key
get_random_secret_key()

CHAVE TB = '0pzk4-ph91=f+n%-771mk$c=@m1(=8^ivf7g+sjnm=s(#)s29@'

git remote -v
git push heroku <branch_local>:master -f
heroku config:set DISABLE_COLLECTSTATIC=1
heroku open

heroku open = PARA ABRIR NOSSA APLICAÇÃO


CRIANDO APPS NO DJANGO

mng startapp base

python ../manage.py startapp

# PYTESTE DJANGO

pipenv install pytest-django

# COBERTURA DE TESTES

pipenv install --dev 'pytest-cov' codecov

pipenv run pytest --cov=pypro gerar as coberturas de teste dentro da pasta do projeto

# CONFIGURAÇÃO PYTHON DECOUPLE

pipenv install 'python-decouple'

heroku config:set DEBUG=False -a django-charles

heroku config   = serve para conferir as variaveis de ambite

criado app django-0147
nova

git push heroku 10:master -f
serve para enviar via terminal para o heroku

Primeiro forc push

heroku config -a django-0147

heroku config:set -a django-0147

DESABILITAMOS O DISABLE_COLLECTSTATIC NO HEROKU

comando = heroku config -a django-0147 DISABLE_COLLECTSTATIC

importamos para o heroku as chaves de segurança do aws que se encontra no .env

heroku config:set -a django-0147 AWS_ACCESS_KEY_ID=AKIASUGGP7B5K7EVDOVV
heroku config:set -a django-0147 AWS_SECRET_ACCESS_KEY=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
heroku config:set -a django-0147 AWS_STORAGE_BUCKET_NAME=cursodjango1

Enviamos a coleta statica

mng collectstatic --no-input

COLLECTFAST_ENABLED = False
COLLECTFAST_ENABLED = True quando estiver ativa

GERAR AS MIGRAÇÕES

COMANDO = mng makemigrations base

VERIFICAR AS MIGRAÇÕES COMANDO = mng showmigrations

APLICAR AS MIGRAÇÕES PARA O BANCO DE DADOS COMANDO = mng migrate


CRIAR SUPER USUARIO = mng createsuperuser charlleshp@hotmail.com

PARA PODER HEROKU RODAR NOSSA APP
release: python manage.py migrate --noinput

CRIAR SUPER USUARIO NO HEROKU: heroku run -a django-0147 python manage.py createsuperuser


CODECOV_TOKEN: 'e9e64690-7443-4174-b56e-23b4137376a1'

AGENDAMENTO DE BACKUPs NO HEROKU

COMANDO = heroku pg:backups:schedule DATABASE_URL --at "02:00 America/Sao_Paulo" -a django-0147


DJANGO DEBUG TOOLBAR

INSTALADO O SENTRY-SDK COMANDO = pipenv install sentry-sdk

template static {% load static %}

teste no titulo ok














