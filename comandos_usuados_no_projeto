Verificar a versão de python global

pyenv global = usado no Linux

pip install pipenv = instala o pipenv

pipenv install django = instal o Django

django-admin = serve para conferir os comandos

django-admin startproject ' nome do projeto ' e um spaço depois ponto PARA criar o arquivo manage.py na raiz do projeto

python manage.py --help = serve para saber os comandos

python manage.py runserver = RODA O SERVIDOR local e CTRLC PARA fechar

OBS: ALIAS LINUX
mng='python $VIRTUALENV_ENV/../manage.py'

ALIAS
windows criar um arquivo mng.bat e coloca  @python "%VIRTUAL_ENV%\..\manage.py" %*: PRONT AGORA E SO rodar mng runserver

pipenv install --dev flake8 = instala o flake8 para uso de desenvolvimeto

rm -rf .venv = REMOVE o ambiente virtual .venv

sudo rm -rf venv

pip uninstall virtualenv

pipenv sync = instalar dependencias que se encontra apenas no arquivo lock

pipenv sync = Apenas as dependencias de desenvolvimento ai ele vai pegar todas que se encontra no aquivo lock e instalar

pipenv install gunicorn = dependência para usar servidor de aplicação com heroku

ATIVAR O AMBIENTE VIRTUAL

linux = source .venv/bin/activate  ou usar o pipenv shell

Windowns = pipenv shell

pip freeze = VER as dependencias instaladas

VARIAVEIS GLOBAL PARA SETAR
    - PIPENV_VENV_IN_PROJECT valor 1 = CRIA o ambiente virtual dentro do projeto
    - PIPENV_IGNORE_VIRTUALENVS valor 1 = Ignora qualquer virtualenv que ja tenha sido criado

RODAR UM COMANDO ISOLADO

pipenv run flake8 = ele vai ativar o virtualen depois vai rodar o comando ao finalizar ele deaativa


heroku apps:create <sua_app>

git remote -v
git push heroku <branch_local>:master -f
heroku config:set DISABLE_COLLECTSTATIC=1
heroku open

heroku open = PARA ABRIR NOSSA APLICAÇÃO


CRIANDO APPS NO DJANGO

mng startapp base

python ../manage.py startapp

# PYTESTE DJANGO

pipenv install pytest-django

# COBERTURA DE TESTES

pipenv install --dev 'pytest-cov' codecov

pipenv run pytest --cov=pypro gerar as coberturas de teste dentro da pasta do projeto












